document.addEventListener('DOMContentLoaded', () => {
    // --- KONFIGURÁCIA A DÁTA ---
    const STORAGE_VERSION = '_v1.17'; // Verzia
    // ... (kľúče, farby, pozície, defaulty ako predtým) ...
     const ACTUAL_DATA_KEY = `prosightNetworkData_actual${STORAGE_VERSION}`; const VISION_DATA_KEY = `prosightNetworkData_vision${STORAGE_VERSION}`; const VIEW_MODE_KEY = `prosightViewMode${STORAGE_VERSION}`; const ACTUAL_VISION_ROOT_KEY = `prosightActualVisionRoot${STORAGE_VERSION}`; const VISION_VISION_ROOT_KEY = `prosightVisionVisionRoot${STORAGE_VERSION}`; const BONUS_ENABLED_KEY = `prosightBonusEnabled${STORAGE_VERSION}`;
    const levelColors = [ '#6c757d', '#28a745', '#20c997', '#17a2b8', '#007bff', '#0056b3', '#6f42c1', '#e83e8c', '#fd7e14' ]; const positions = { 'T': { name: 'Tipér', eur_per_vb: 2.50, level: 0, bonus_small_threshold: 0, bonus_large_threshold: 0, bonus_small_add: 0, bonus_large_add: 0, targetProduction: 0 }, 'TR': { name: 'Trainee', eur_per_vb: 2.50, level: 1, bonus_small_threshold: 0, bonus_large_threshold: 0, bonus_small_add: 0, bonus_large_add: 0, targetProduction: 0 }, 'FC': { name: 'Finance Consultant', eur_per_vb: 3.50, level: 2, bonus_small_threshold: 200, bonus_large_threshold: 300, bonus_small_add: 1.00, bonus_large_add: 1.50, targetProduction: 300 }, 'TL': { name: 'Team Leader', eur_per_vb: 4.50, level: 3, bonus_small_threshold: 200, bonus_large_threshold: 300, bonus_small_add: 0.50, bonus_large_add: 1.50, targetProduction: 450 }, 'M': { name: 'Manager', eur_per_vb: 5.30, level: 4, bonus_small_threshold: 300, bonus_large_threshold: 450, bonus_small_add: 0.50, bonus_large_add: 1.50, targetProduction: 900 }, 'SM': { name: 'Senior Manager', eur_per_vb: 6.05, level: 5, bonus_small_threshold: 300, bonus_large_threshold: 450, bonus_small_add: 0.50, bonus_large_add: 1.50, targetProduction: 2100 }, 'D': { name: 'Director', eur_per_vb: 6.80, level: 6, bonus_small_threshold: 400, bonus_large_threshold: 600, bonus_small_add: 0.50, bonus_large_add: 1.50, targetProduction: 5250 }, 'MD': { name: 'Managing Director', eur_per_vb: 7.50, level: 7, bonus_small_threshold: 400, bonus_large_threshold: 600, bonus_small_add: 0.50, bonus_large_add: 1.00, targetProduction: 13750 }, 'P': { name: 'Partner', eur_per_vb: 8.15, level: 8, bonus_small_threshold: 400, bonus_large_threshold: 600, bonus_small_add: 0.50, bonus_large_add: 1.00, targetProduction: 30000 } }; const DEFAULT_OWN_PRODUCTION_FC_PLUS = 300; const defaultNetworkData = { id: 'root', position: 'M', children: [ { id: 'fc1_default', position: 'FC', children: [] }, { id: 'fc2_default', position: 'FC', children: [] }, { id: 'tr1_default', position: 'TR', children: [] } ] };
    function createDefaultData(isVision = false) { const data = JSON.parse(JSON.stringify(defaultNetworkData)); return data; }
    let actualNetworkData = loadData(ACTUAL_DATA_KEY, null); let visionNetworkData = loadData(VISION_DATA_KEY, null); if (actualNetworkData === null) { actualNetworkData = createDefaultData(false); saveData(ACTUAL_DATA_KEY, actualNetworkData); } if (visionNetworkData === null) { visionNetworkData = createDefaultData(false); saveData(VISION_DATA_KEY, visionNetworkData); }
    let selectedNodeId = null; let currentViewMode = loadData(VIEW_MODE_KEY, 'vision'); let actualVisionRootId = loadData(ACTUAL_VISION_ROOT_KEY, null); let visionVisionRootId = loadData(VISION_VISION_ROOT_KEY, null); let isBonusEnabled = loadData(BONUS_ENABLED_KEY, false);

    // --- DOM Elementy ---
    // ... (ako predtým) ...
    const tabButtons = document.querySelectorAll('.tab-button'); const tabContents = document.querySelectorAll('.tab-content'); const bonusToggleCheckbox = document.getElementById('bonus-toggle-checkbox'); const totalNetworkCommissionSpan = document.getElementById('total-network-commission'); const totalPointsSpan = document.getElementById('total-points'); const resetModalOverlay = document.getElementById('reset-modal-overlay'); const resetActualConfirmBtn = document.getElementById('reset-actual-confirm'); const resetVisionConfirmBtn = document.getElementById('reset-vision-confirm'); const resetBothConfirmBtn = document.getElementById('reset-both-confirm'); const resetCancelBtn = document.getElementById('reset-cancel'); const tooltip = d3.select("#tooltip"); const svgElement = document.getElementById('network-svg'); const summaryPanel = document.getElementById('summary-panel'); const detailPanel = document.getElementById('detail-panel'); const editPositionSelect = document.getElementById('edit-position-select'); const editLabelInput = document.getElementById('edit-label-input'); const editProductionInput = document.getElementById('edit-production-input'); const editProductionRow = document.getElementById('edit-production-row'); const saveNodeChangesButton = document.getElementById('save-node-changes-button'); const deleteNodeButton = document.getElementById('delete-node-button'); const markVisionButton = document.getElementById('mark-vision-button'); const addPositionSelect = document.getElementById('add-position-select'); const addCountInput = document.getElementById('add-count-input'); const addNodeButton = document.getElementById('add-node-button'); const resetNetworkButton = document.getElementById('reset-network-button'); const detailNodePositionStatic = document.getElementById('detail-node-position-static'); const detailBonusAmountSpan = document.getElementById('detail-bonus-amount'); const totalPfaSpan = document.getElementById('total-pfa'); const detailDirectPfaSpan = document.getElementById('detail-direct-pfa'); const detailTotalTeamPfaSpan = document.getElementById('detail-total-team-pfa'); const detailAvgPfaProdSpan = document.getElementById('detail-avg-pfa-prod'); const detailTargetProdSpan = document.getElementById('detail-target-prod'); const viewActualButton = document.getElementById('view-actual-button'); const viewVisionButton = document.getElementById('view-vision-button'); const summaryTitle = document.getElementById('summary-title'); const summaryNote = document.getElementById('summary-note'); const statsModeLabel = document.getElementById('stats-mode-label'); const detailGroupPointsSpan = document.getElementById('detail-group-points'); const detailOwnCommissionSpan = document.getElementById('detail-own-commission'); const detailInterimCommissionSpan = document.getElementById('detail-interim-commission'); const detailTotalIncomeSpan = document.getElementById('detail-total-income'); const subordinatesUl = document.getElementById('subordinates-ul'); const noSubordinatesLi = document.querySelector('.no-subordinates');


    // --- D3 Globálne Premenné ---
    let svg, gWrapper, gLinks, gNodes, gVisionBg; const NODE_RADIUS = 20; let nodeWidth = 110; let nodeHeight = 110; let currentTransform = d3.zoomIdentity;

    // --- Pomocné funkcie ---
    function getWorkingData() { return currentViewMode === 'actual' ? actualNetworkData : visionNetworkData; }
    function getVisionRootId() { return currentViewMode === 'actual' ? actualVisionRootId : visionVisionRootId; }
    function setVisionRootId(newId) { if (currentViewMode === 'actual') { actualVisionRootId = newId; saveData(ACTUAL_VISION_ROOT_KEY, actualVisionRootId); } else { visionVisionRootId = newId; saveData(VISION_VISION_ROOT_KEY, visionVisionRootId); } }

    // --- FUNKCIE PRE UKLADANIE/NAČÍTANIE/RESET ---
    function saveData(key, data) { try { localStorage.setItem(key, JSON.stringify(data)); /*console.log(`Dáta uložené: ${key}`);*/ } catch (e) { console.error(`Chyba pri ukladaní (${key}):`, e); } }
    function loadData(key, defaultValue) { /* ... */ const savedData = localStorage.getItem(key); if (savedData) { try { /*console.log(`Načítavam dáta: ${key}`);*/ return JSON.parse(savedData); } catch (e) { console.error(`Chyba pri načítaní (${key}):`, e); localStorage.removeItem(key); return JSON.parse(JSON.stringify(defaultValue)); } } else { /*console.log(`Žiadne dáta pre ${key}, používam default.`);*/ return JSON.parse(JSON.stringify(defaultValue)); } }
    function showResetModal() { resetModalOverlay.style.display = 'flex'; }
    function hideResetModal() { resetModalOverlay.style.display = 'none'; }
    function performReset(type) { hideResetModal(); let resetActual = false; let resetVision = false; let needsRender = false; if (type === 'actual' || type === 'both') { resetActual = true; localStorage.removeItem(ACTUAL_DATA_KEY); localStorage.removeItem(ACTUAL_VISION_ROOT_KEY); actualNetworkData = createDefaultData(false); saveData(ACTUAL_DATA_KEY, actualNetworkData); if (currentViewMode === 'actual') { needsRender = true; } console.log("Aktuálny stav bol resetovaný."); } if (type === 'vision' || type === 'both') { resetVision = true; localStorage.removeItem(VISION_DATA_KEY); localStorage.removeItem(VISION_VISION_ROOT_KEY); visionNetworkData = createDefaultData(false); saveData(VISION_DATA_KEY, visionNetworkData); if (currentViewMode === 'vision') { needsRender = true; } console.log("Vízia siete bola resetovaná."); } if (type === 'both') { localStorage.removeItem(VIEW_MODE_KEY); localStorage.removeItem(BONUS_ENABLED_KEY); currentViewMode = 'vision'; actualVisionRootId = null; visionVisionRootId = null; isBonusEnabled = false; console.log("Resetovaný aj uložený pohľad, označenia vízií a stav bonusu."); } if(needsRender) { selectedNodeId = null; currentTransform = d3.zoomIdentity; render(); } else { updateViewToggleButtons(); } bonusToggleCheckbox.checked = isBonusEnabled; }

    // --- VÝPOČTOVÉ FUNKCIE ---
    function getPositionInfo(positionKey) { return positions[positionKey] || { name: 'N/A', eur_per_vb: 0, level: -1, bonus_small_threshold: 0, bonus_large_threshold: 0, bonus_small_add: 0, bonus_large_add: 0, targetProduction: 0 }; }
    function calculateNodeStatsRecursive(node, useVisionLogic) { /* ... ako predtým ... */ const positionInfo = getPositionInfo(node.position); let groupPoints = 0; let groupPFA = 0; let groupOwnProductionPFA = 0; let interimCommissionTotal = 0; let groupTotalIncome = 0; if (node.children) { node.children.forEach(child => { const childStats = calculateNodeStatsRecursive(child, useVisionLogic); groupPoints += childStats.totalPoints_ForInterim; groupPFA += childStats.totalPFA_InSubtree; groupOwnProductionPFA += childStats.totalOwnProductionPFA_InSubtree; groupTotalIncome += childStats.subtreeTotalIncome; const childPositionInfo = getPositionInfo(child.position); const interimCommissionRate = Math.max(0, positionInfo.eur_per_vb - childPositionInfo.eur_per_vb); interimCommissionTotal += interimCommissionRate * childStats.totalPoints_ForInterim; }); } let ownProductionForOwnCommission; if (useVisionLogic) { ownProductionForOwnCommission = (positionInfo.level >= 2) ? DEFAULT_OWN_PRODUCTION_FC_PLUS : 0; } else { if (node.vlastnaProdukcia !== undefined && node.vlastnaProdukcia !== null && node.vlastnaProdukcia !== '') { ownProductionForOwnCommission = parseFloat(node.vlastnaProdukcia) || 0; } else if (node.position === 'FC') { ownProductionForOwnCommission = DEFAULT_OWN_PRODUCTION_FC_PLUS; } else { ownProductionForOwnCommission = 0; } } let effectiveRate = positionInfo.eur_per_vb; let bonusAmount = 0; let bonusAdd = 0; if (isBonusEnabled) { if (ownProductionForOwnCommission >= positionInfo.bonus_large_threshold && positionInfo.bonus_large_threshold > 0) { bonusAdd = positionInfo.bonus_large_add; } else if (ownProductionForOwnCommission >= positionInfo.bonus_small_threshold && positionInfo.bonus_small_threshold > 0) { bonusAdd = positionInfo.bonus_small_add; } effectiveRate += bonusAdd; bonusAmount = ownProductionForOwnCommission * bonusAdd; } const ownCommission = ownProductionForOwnCommission * effectiveRate; let totalPoints_ForInterim; if (useVisionLogic) { totalPoints_ForInterim = positionInfo.targetProduction || 0; } else { totalPoints_ForInterim = ownProductionForOwnCommission + groupPoints; } const totalIncome = ownCommission + interimCommissionTotal; const isPFA = positionInfo.level >= 2; const currentPFA = isPFA ? 1 : 0; const totalPFA_InSubtree = currentPFA + groupPFA; const totalOwnProductionPFA_InSubtree = (isPFA ? ownProductionForOwnCommission : 0) + groupOwnProductionPFA; const averageOwnProductionPFA = totalPFA_InSubtree > 0 ? totalOwnProductionPFA_InSubtree / totalPFA_InSubtree : 0; const directPFACount = node.children ? node.children.filter(c => getPositionInfo(c.position).level >= 2).length : 0; const subtreeTotalIncome = totalIncome + groupTotalIncome; node.calculatedStats = { ownProduction: ownProductionForOwnCommission, groupPoints: groupPoints, totalPoints_ForInterim: totalPoints_ForInterim, ownCommission: ownCommission, bonusAmount: bonusAmount, interimCommission: interimCommissionTotal, totalIncome: totalIncome, directPFA: directPFACount, totalPFA_InSubtree: totalPFA_InSubtree, totalOwnProductionPFA_InSubtree: totalOwnProductionPFA_InSubtree, averageOwnProductionPFA: averageOwnProductionPFA, subtreeTotalIncome: subtreeTotalIncome }; return node.calculatedStats; }

    // --- VIZUALIZAČNÉ FUNKCIE ---
    function initializeSVG() { /* ... */ svg = d3.select(svgElement); gWrapper = svg.append("g").attr("id", "zoom-wrapper"); gVisionBg = gWrapper.append("g").attr("class", "vision-background-group"); gLinks = gWrapper.append("g").attr("class", "links"); gNodes = gWrapper.append("g").attr("class", "nodes"); const zoom = d3.zoom().scaleExtent([0.1, 3]).on("zoom", (event) => { currentTransform = event.transform; gWrapper.attr("transform", event.transform); }); svg.call(zoom); }
    function isNodeInVision(nodeId, startNodeId, rootData) { /* ... */ if (!startNodeId || !nodeId) return false; if (nodeId === startNodeId) return true; const startNode = findNodeById(rootData, startNodeId); if (!startNode) return false; function checkDescendants(node) { if (node.id === nodeId) return true; if (node.children) { for (const child of node.children) { if (checkDescendants(child)) return true; } } return false; } return checkDescendants(startNode); }
    function drawNetworkD3() { /* ... ako predtým ... */ const workingData = getWorkingData(); const visionRootId = getVisionRootId(); calculateNodeStatsRecursive(workingData, currentViewMode === 'vision'); const rootHierarchy = d3.hierarchy(workingData); const treeLayout = d3.tree().nodeSize([nodeWidth, nodeHeight]); treeLayout(rootHierarchy); const nodes = rootHierarchy.descendants(); const links = rootHierarchy.links(); let minX = 0, maxX = 0, minY = 0, maxY = 0; nodes.forEach(node => { const x = node.x; const y = node.y; node.vx = x; node.vy = y; minX = Math.min(minX, x - NODE_RADIUS); maxX = Math.max(maxX, x + NODE_RADIUS); minY = Math.min(minY, y - NODE_RADIUS); maxY = Math.max(maxY, y + NODE_RADIUS); }); const calculatedWidth = maxX - minX; const calculatedHeight = maxY - minY; const paddingHorizontal = 50; const paddingTop = 50; const paddingBottom = 80; const viewboxWidth = calculatedWidth + 2 * paddingHorizontal; const viewboxHeight = calculatedHeight + paddingTop + paddingBottom; const svgWidth = svgElement.clientWidth; const svgHeight = svgElement.clientHeight; let transformToApply = currentTransform; if (transformToApply === d3.zoomIdentity && viewboxWidth > 0 && viewboxHeight > 0) { const initialScale = Math.min(svgWidth / viewboxWidth, svgHeight / viewboxHeight) * 0.95; const initialTranslateX = (svgWidth / 2) - (calculatedWidth / 2 + minX) * initialScale; const initialTranslateY = paddingTop * initialScale; transformToApply = d3.zoomIdentity.translate(initialTranslateX, initialTranslateY).scale(initialScale); currentTransform = transformToApply; svg.call(d3.zoom().transform, currentTransform); } else if (viewboxWidth <= 0 || viewboxHeight <= 0) { transformToApply = d3.zoomIdentity; } gWrapper.attr('transform', transformToApply);
        gVisionBg.selectAll('rect').transition().duration(250).attr('opacity', 0).remove(); if (visionRootId) { const visionStartNode = rootHierarchy.find(d => d.data.id === visionRootId); if (visionStartNode) { const visionNodes = visionStartNode.descendants(); if (visionNodes.length > 0) { let vMinY = visionStartNode.vy, vMaxY = visionStartNode.vy; let levelExtents = {}; visionNodes.forEach(node => { const depth = node.depth; vMinY = Math.min(vMinY, node.vy); vMaxY = Math.max(vMaxY, node.vy); if (!levelExtents[depth]) levelExtents[depth] = { minX: node.vx, maxX: node.vx }; else { levelExtents[depth].minX = Math.min(levelExtents[depth].minX, node.vx); levelExtents[depth].maxX = Math.max(levelExtents[depth].maxX, node.vx); } }); let maxLevelWidth = 0; let overallMinX = Infinity; let overallMaxX = -Infinity; for (const depth in levelExtents) { maxLevelWidth = Math.max(maxLevelWidth, levelExtents[depth].maxX - levelExtents[depth].minX); overallMinX = Math.min(overallMinX, levelExtents[depth].minX); overallMaxX = Math.max(overallMaxX, levelExtents[depth].maxX); } const bgPaddingX = nodeWidth * 0.5; const bgPaddingY = NODE_RADIUS * 1.5; const finalBgWidth = Math.max(maxLevelWidth + 2 * bgPaddingX, NODE_RADIUS * 5); const finalBgX = overallMinX - (finalBgWidth - (overallMaxX - overallMinX))/2 ; gVisionBg.append('rect').attr('class', 'vision-background').attr('x', finalBgX).attr('y', vMinY - bgPaddingY).attr('width', finalBgWidth).attr('height', vMaxY - vMinY + 2 * bgPaddingY).attr('opacity', 0).transition().duration(500).attr('opacity', 0.5); } } }
        const linkGenerator = d3.linkVertical().x(d => d.vx).y(d => d.vy); gLinks.selectAll('path.link').data(links, d => d.target.data.id).join( enter => enter.append('path').attr('class', d => `link ${isNodeInVision(d.target.data.id, visionRootId, workingData) ? 'in-vision' : ''}`).attr('d', d => { const o = {vx: d.source.vx, vy: d.source.vy - NODE_RADIUS}; const t = {vx: d.target.vx, vy: d.target.vy + NODE_RADIUS}; return linkGenerator({source: o, target: o}); }).attr('opacity', 0).call(enter => enter.transition().duration(500).attr('d', linkGenerator).attr('opacity', 1)), update => update.attr('class', d => `link ${isNodeInVision(d.target.data.id, visionRootId, workingData) ? 'in-vision' : ''}`).call(update => update.transition().duration(500).attr('d', linkGenerator)), exit => exit.call(exit => exit.transition().duration(500).attr('d', d => { const o = {vx: d.source.vx, vy: d.source.vy - NODE_RADIUS}; const t = {vx: d.target.vx, vy: d.target.vy + NODE_RADIUS}; return linkGenerator({source: o, target: o}); }).attr('opacity', 0).remove()) ); gNodes.selectAll('g.node').data(nodes, d => d.data.id).join( enter => { const g = enter.append('g').attr('class', d => `node ${selectedNodeId === d.data.id ? 'selected' : ''} ${isNodeInVision(d.data.id, visionRootId, workingData) ? 'in-vision' : ''}`).attr('transform', d => `translate(${d.parent ? d.parent.vx : d.vx}, ${d.parent ? d.parent.vy : d.vy})`).attr('opacity', 0).on('click', (event, d) => { event.stopPropagation(); handleNodeClick(d.data.id); }).on('mouseover', (event, d) => { const posInfo = getPositionInfo(d.data.position); const income = d.data.calculatedStats ? Math.round(d.data.calculatedStats.totalIncome).toLocaleString('sk-SK') + ' €' : 'N/A'; tooltip.style('opacity', 0.9).html(`<strong>${posInfo.name}</strong> (${d.data.label || d.data.position})<br>Príjem (${currentViewMode === 'vision' ? 'Vízia':'Aktuál'}): ${income}`); }).on('mousemove', (event) => { tooltip.style('left', (event.pageX + 15) + 'px').style('top', (event.pageY - 10) + 'px'); }).on('mouseout', () => { tooltip.style('opacity', 0); }); g.append('circle').attr('r', NODE_RADIUS).style('fill', d => levelColors[getPositionInfo(d.data.position).level] || '#6c757d'); g.append('text').text(d => d.data.label || d.data.position).attr('dy', '0.31em'); g.transition().duration(500).attr('transform', d => `translate(${d.vx}, ${d.vy})`).attr('opacity', 1); return g; }, update => { update.attr('class', d => `node ${selectedNodeId === d.data.id ? 'selected' : ''} ${isNodeInVision(d.data.id, visionRootId, workingData) ? 'in-vision' : ''}`); update.select('text').text(d => d.data.label || d.data.position); update.select('circle').style('fill', d => levelColors[getPositionInfo(d.data.position).level] || '#6c757d'); update.transition().duration(500).attr('transform', d => `translate(${d.vx}, ${d.vy})`).attr('opacity', 1); return update; }, exit => { exit.transition().duration(500).attr('transform', d => `translate(${d.parent ? d.parent.vx : d.vx}, ${d.parent ? d.parent.vy : d.vy})`).attr('opacity', 0).remove(); } ); }
    function render() { drawNetworkD3(); if (selectedNodeId) { updateDetailPanelContent(selectedNodeId); } else { updateSummaryPanelContent(); } updateViewToggleButtons(); }


    // --- OBSLUHA INTERAKCIÍ ---
    // *** ZMENA: Predvolená záložka po kliknutí ***
    function handleNodeClick(nodeId) { selectedNodeId = nodeId; switchTab('stats'); /* Default je teraz stats */ render(); }
    function handleBackgroundClick() { selectedNodeId = null; render(); }
    svgElement.addEventListener('click', (event) => { if (event.target === svgElement) handleBackgroundClick(); });
    function findNodeAndParent(startNode, targetId, parent = null) { /* ... */ if (startNode.id === targetId) { return { node: startNode, parent: parent }; } if (startNode.children) { for (const child of startNode.children) { const found = findNodeAndParent(child, targetId, startNode); if (found) { return found; } } } return null; }
    function findNodeById(node, id) { /* ... */ if (node.id === id) return node; if(node.children) { for (const child of node.children) { const found = findNodeById(child, id); if (found) return found; } } return null; }
    function updateSummaryPanelContent() { /* ... ako predtým ... */ summaryPanel.style.display = 'block'; detailPanel.style.display = 'none'; const workingData = getWorkingData(); const stats = workingData.calculatedStats || { totalPFA_InSubtree: 0, totalPoints_ForInterim: 0, subtreeTotalIncome: 0 }; totalPfaSpan.textContent = stats.totalPFA_InSubtree; totalPointsSpan.textContent = Math.round(stats.totalPoints_ForInterim); totalNetworkCommissionSpan.textContent = Math.round(stats.subtreeTotalIncome).toLocaleString('sk-SK') + ' €'; updateViewToggleButtons(); }
    function updateDetailPanelContent(nodeId) { /* ... ako predtým ... */ const workingData = getWorkingData(); const visionRoot = getVisionRootId(); const nodeInfo = findNodeAndParent(workingData, nodeId); if (!nodeInfo) return; const node = nodeInfo.node; const isRoot = nodeInfo.parent === null; const positionInfo = getPositionInfo(node.position); const stats = node.calculatedStats || { ownProduction: 0, groupPoints: 0, ownCommission: 0, bonusAmount: 0, interimCommission: 0, totalIncome: 0, directPFA: 0, totalPFA_InSubtree: 0, averageOwnProductionPFA: 0, totalPoints_ForInterim: 0 }; summaryPanel.style.display = 'none'; detailPanel.style.display = 'block'; document.getElementById('detail-node-title').textContent = `Detail Tímu: ${node.label || positionInfo.name}`; detailNodePositionStatic.textContent = `${node.position} (${positionInfo.name})`; editPositionSelect.value = node.position; editLabelInput.value = node.label || ''; if (currentViewMode === 'vision') { editProductionRow.style.display = 'none'; } else { editProductionRow.style.display = 'flex'; editProductionInput.value = node.vlastnaProdukcia === undefined ? '' : node.vlastnaProdukcia; } statsModeLabel.textContent = currentViewMode === 'actual' ? 'Aktuálny stav' : 'Vízia'; detailDirectPfaSpan.textContent = stats.directPFA; detailTotalTeamPfaSpan.textContent = stats.totalPFA_InSubtree; detailAvgPfaProdSpan.textContent = Math.round(stats.averageOwnProductionPFA); detailTargetProdSpan.textContent = positionInfo.targetProduction > 0 ? positionInfo.targetProduction.toLocaleString('sk-SK') : "N/A"; detailGroupPointsSpan.textContent = Math.round(stats.groupPoints); detailOwnCommissionSpan.textContent = Math.round(stats.ownCommission).toLocaleString('sk-SK') + ' €'; detailBonusAmountSpan.textContent = Math.round(stats.bonusAmount).toLocaleString('sk-SK'); detailInterimCommissionSpan.textContent = Math.round(stats.interimCommission).toLocaleString('sk-SK') + ' €'; detailTotalIncomeSpan.textContent = Math.round(stats.totalIncome).toLocaleString('sk-SK') + ' €';
        subordinatesUl.innerHTML = ''; if (node.children && node.children.length > 0) { noSubordinatesLi.style.display = 'none'; node.children.forEach(child => { const childPosInfo = getPositionInfo(child.position); const childStats = child.calculatedStats || { totalPoints_ForInterim: 0, totalIncome: 0}; const li = document.createElement('li'); li.innerHTML = `<span class="node-name">${child.label || childPosInfo.name} (${child.position})</span><span class="node-stats"><span class="points">${Math.round(childStats.totalPoints_ForInterim)} B</span><span class="income">${Math.round(childStats.totalIncome).toLocaleString('sk-SK')} €</span></span>`; li.style.cursor = 'pointer'; li.onclick = () => handleNodeClick(child.id); subordinatesUl.appendChild(li); }); } else { noSubordinatesLi.style.display = 'block'; }
        deleteNodeButton.disabled = isRoot; markVisionButton.disabled = false; const markVisionIcon = markVisionButton.querySelector('i'); if(nodeId === visionRoot) { markVisionButton.innerHTML = `<i class="fas fa-times-circle"></i> Zrušiť Víziu`; } else { markVisionButton.innerHTML = `<i class="fas fa-star"></i> Označiť Víziu`; } } // Opravená kontrola ikony
    function handleAddNode() { /* ... */ if (!selectedNodeId) { alert("Najprv vyberte uzol..."); return; } const workingData = getWorkingData(); const parentNode = findNodeById(workingData, selectedNodeId); if (!parentNode) return; const positionKey = addPositionSelect.value; const count = parseInt(addCountInput.value) || 1; const positionInfo = getPositionInfo(positionKey); for (let i = 0; i < count; i++) { const newNodeId = `${positionKey.toLowerCase()}-${Date.now()}-${Math.random().toString(16).slice(2, 8)}`; const newNode = { id: newNodeId, position: positionKey, vlastnaProdukcia: (positionKey === 'T' || positionKey === 'TR' || positionInfo.level > 2) ? 0 : undefined, children: [] }; if (!parentNode.children) { parentNode.children = []; } parentNode.children.push(newNode); } render(); saveData(currentViewMode === 'actual' ? ACTUAL_DATA_KEY : VISION_DATA_KEY, workingData); }
    function handleSaveChanges() { /* ... */ if (!selectedNodeId) return; const workingData = getWorkingData(); const node = findNodeById(workingData, selectedNodeId); if (!node) return; const newPosition = editPositionSelect.value; const newLabel = editLabelInput.value.trim(); const newProductionRaw = editProductionInput.value.trim(); node.position = newPosition; if (newLabel) { node.label = newLabel; } else { delete node.label; } if (currentViewMode === 'actual') { if (newProductionRaw === '') { delete node.vlastnaProdukcia; } else { node.vlastnaProdukcia = parseFloat(newProductionRaw) || 0; } } else { delete node.vlastnaProdukcia; } render(); saveData(currentViewMode === 'actual' ? ACTUAL_DATA_KEY : VISION_DATA_KEY, workingData); }
    function handleDeleteNode() { /* ... */ if (!selectedNodeId) return; const workingData = getWorkingData(); const nodeInfo = findNodeAndParent(workingData, selectedNodeId); if (!nodeInfo || !nodeInfo.parent) { alert("Koreňový uzol siete nie je možné odstrániť."); return; } const nodeToDelete = nodeInfo.node; const parent = nodeInfo.parent; const nodeName = nodeToDelete.label || nodeToDelete.position; const parentName = parent.label || parent.position; if (confirm(`Naozaj chcete odstrániť uzol "${nodeName}" z pohľadu "${currentViewMode === 'actual' ? 'Aktuálny stav':'Vízia'}"? Jeho priami podriadení budú presunutí pod "${parentName}".`)) { const orphans = nodeToDelete.children ? [...nodeToDelete.children] : []; parent.children = parent.children.filter(child => child.id !== selectedNodeId); if (orphans.length > 0) { if (!parent.children) { parent.children = []; } parent.children.push(...orphans); } if (selectedNodeId === getVisionRootId()) { setVisionRootId(null); } selectedNodeId = null; render(); saveData(currentViewMode === 'actual' ? ACTUAL_DATA_KEY : VISION_DATA_KEY, workingData); console.log(`Uzol ${nodeToDelete.id} bol odstránený z ${currentViewMode} dát.`); } }
    // Opravená funkcia - ukladá správny kľúč pre vision root ID
    function handleToggleVisionMark() { if (!selectedNodeId) return; const currentRoot = getVisionRootId(); const keyToSave = currentViewMode === 'actual' ? ACTUAL_VISION_ROOT_KEY : VISION_VISION_ROOT_KEY; const dataKeyToSave = currentViewMode === 'actual' ? ACTUAL_DATA_KEY : VISION_DATA_KEY; if (selectedNodeId === currentRoot) { setVisionRootId(null); } else { setVisionRootId(selectedNodeId); } saveData(keyToSave, getVisionRootId()); /* Uložíme správny ID kľúč */ /* saveData(dataKeyToSave, getWorkingData()); // Ukladanie dát asi netreba, len sa mení označenie */ render(); }
    function setViewMode(mode) { /* ... */ if (currentViewMode === mode) return; currentViewMode = mode; selectedNodeId = null; saveData(VIEW_MODE_KEY, currentViewMode); render(); }
    function updateViewToggleButtons() { /* ... */ viewActualButton.classList.toggle('active', currentViewMode === 'actual'); viewVisionButton.classList.toggle('active', currentViewMode === 'vision'); if (summaryTitle) { summaryTitle.textContent = `Celkový Súhrn Siete (${currentViewMode === 'actual' ? 'Aktuálny stav' : 'Vízia'})`; } if (summaryNote) { summaryNote.textContent = currentViewMode === 'actual' ? '*Odhad založený na editovanej/štandardnej produkcii.' : '*Odhad založený na cieľových produkciách pozícií.'; } if (statsModeLabel) { statsModeLabel.textContent = currentViewMode === 'actual' ? 'Aktuálny stav' : 'Vízia'; } }
    function handleBonusToggleChange(event) { /* ... */ isBonusEnabled = event.target.checked; saveData(BONUS_ENABLED_KEY, isBonusEnabled); render(); }
    function switchTab(tabId) { /* ... */ tabContents.forEach(content => content.classList.remove('active')); tabButtons.forEach(button => button.classList.remove('active')); const selectedContent = document.getElementById(`tab-${tabId}`); const selectedButton = document.querySelector(`.tab-button[data-tab="${tabId}"]`); if (selectedContent && selectedButton) { selectedContent.classList.add('active'); selectedButton.classList.add('active'); } else { document.getElementById('tab-stats').classList.add('active'); document.querySelector('.tab-button[data-tab="stats"]').classList.add('active'); } } // Default na stats

    // --- INICIALIZÁCIA ---
    bonusToggleCheckbox.checked = isBonusEnabled;
    Object.keys(positions).forEach(key => { const optionText = `${key} (${positions[key].name})`; const addOption = document.createElement('option'); addOption.value = key; addOption.textContent = optionText; addPositionSelect.appendChild(addOption); const editOption = document.createElement('option'); editOption.value = key; editOption.textContent = optionText; editPositionSelect.appendChild(editOption); });
    addNodeButton.addEventListener('click', handleAddNode); resetNetworkButton.addEventListener('click', showResetModal); saveNodeChangesButton.addEventListener('click', handleSaveChanges); deleteNodeButton.addEventListener('click', handleDeleteNode); markVisionButton.addEventListener('click', handleToggleVisionMark);
    resetActualConfirmBtn.addEventListener('click', () => performReset('actual')); resetVisionConfirmBtn.addEventListener('click', () => performReset('vision')); resetBothConfirmBtn.addEventListener('click', () => performReset('both')); resetCancelBtn.addEventListener('click', hideResetModal); resetModalOverlay.addEventListener('click', (event) => { if (event.target === resetModalOverlay) { hideResetModal(); } });
    viewActualButton.addEventListener('click', () => setViewMode('actual')); viewVisionButton.addEventListener('click', () => setViewMode('vision'));
    bonusToggleCheckbox.addEventListener('change', handleBonusToggleChange);
    tabButtons.forEach(button => { button.addEventListener('click', () => { switchTab(button.dataset.tab); }); });
    initializeSVG();
    render(); // Prvé vykreslenie

});